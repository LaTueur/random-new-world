rnw_de_jure_setup_effect = {
	save_temporary_scope_value_as = {
		name = tier_long
		value = tier_$TIER$
	}
	save_temporary_scope_value_as = {
		name = bellow_tier
		value = tier_$BELLOW_TIER$
	}
	save_temporary_scope_value_as = {
		name = max
		value = $MAX$
	}
	save_temporary_scope_value_as = {
		name = min
		value = $MIN$
	}
	every_$BELLOW_TIER$ = {
		limit = {
			is_titular = no
		}
		add_to_list = titles_to_handle
	}
	rnw_initial_de_jure_set_up_effect = {
		TIER = $TIER$
		BELLOW_TIER = $BELLOW_TIER$
	}
	rnw_check_merge_titles_effect = {
		BELLOW_TIER = $BELLOW_TIER$
	}
	if = {
		limit = {
			NOT = {
				has_game_rule = full_rnw_de_jure_randomization
			}
		}
		rnw_cut_off_disconnected_titles_effect = yes
	}
	every_in_list = {
		list = titles_with_few_title
		remove_variable = checked_merge
		remove_from_list = titles_with_few_title
	}
	every_in_list = {
		list = titles_to_handle
		remove_variable = checked_de_jure
		remove_from_list = titles_to_handle
	}
	every_in_list = {
		list = handled_coastal_titles
		remove_from_list = handled_coastal_titles
	}
	every_$TIER$ = {
		limit = {
			is_titular = no
		}
		save_temporary_scope_as = checked_title
		every_$BELLOW_TIER$_in_de_jure_hierarchy = {
			save_scope_as = collecting_title
			every_in_list = {
				variable = connected_titles
				save_scope_as = connected_title
				rnw_connect_title_effect = {
					SCOPE = de_jure_liege
					NAVAL = no
				}
			}
		}
		ordered_$BELLOW_TIER$_in_de_jure_hierarchy = {
			order_by = rnw_capital_score
			max = 1
			save_temporary_scope_as = capital_title
			scope:checked_title = {
				set_capital_county = scope:capital_title.title_capital_county
			}
		}
	}
	clear_saved_scope = tier_long
	clear_saved_scope = new_title
	clear_saved_scope = old_title
	clear_saved_scope = bellow_tier
	clear_saved_scope = min
	clear_saved_scope = max
}
rnw_set_de_jure_liege_title_effect = {
	set_de_jure_liege_title = scope:new_title
	set_variable = { name = checked_de_jure value = yes }
	if = {
		limit = {
			any_county_in_de_jure_hierarchy = {
				is_coastal_county = yes
			}
		}
		add_to_list = handled_coastal_titles
	}
}
rnw_merge_titles_effect = {
	$SUBSERVIENT$ = {
		every_in_de_jure_hierarchy = {
			continue = {
				tier > scope:bellow_tier
			}
			limit = {
				tier = scope:bellow_tier
			}
			set_de_jure_liege_title = $DOMINANT$
		}
	}
	$SUBSERVIENT$ = {
		if = {
			limit = {
				is_in_list = titles_with_few_title
			}
			set_variable = { name = checked_merge value = yes }
		}
	}
	$DOMINANT$ = {
		if = {
			limit = {
				is_in_list = titles_with_few_title
				scope:min > rnw_num_of_direct_de_jure_titles
			}
			set_variable = { name = checked_merge value = yes }
		}
	}
}
rnw_initial_de_jure_set_up_effect = {
	while = {
		limit = {
			any_in_list = {
				list = titles_to_handle
				NOT = {	exists = var:checked_de_jure }
			}
		}
		if = {
			limit = {
				any_in_list = {
					list = titles_to_handle
					rnw_has_empty_connected_title_trigger = yes
				}
			}
			random_in_list = {
				list = titles_to_handle
				limit = {
					rnw_has_empty_connected_title_trigger = yes
				}
				random_in_list = {
					variable = connected_titles
					limit = {
						NOT = {	exists = var:checked_de_jure }
					}
					save_scope_as = old_title
				}
			}
		}
		else = {
			random_in_list = {
				list = titles_to_handle
				limit = {
					NOT = {	exists = var:checked_de_jure }
				}
				save_scope_as = old_title
			}
		}

		scope:old_title = {
			create_dynamic_title = {
				tier = $TIER$
				name = NEW_CREATED_TITLE_NAME
			}
			rnw_set_de_jure_liege_title_effect = yes
			title_capital_county = {
				save_temporary_scope_as = core_county
			}
			scope:new_title = {
				set_variable = {
					name = titles_still_wanted
					value = {
						value = scope:max
						add = scope:min
						divide = 2
						subtract = 1
					}
				}
				set_coa = scope:old_title
				set_color_from_title = scope:old_title
				set_capital_county = scope:core_county
				while = {
					count = var:titles_still_wanted
					limit = {
						any_$BELLOW_TIER$_in_de_jure_hierarchy = {
							rnw_has_empty_connected_title_trigger = yes
						}
					}
					every_$BELLOW_TIER$_in_de_jure_hierarchy = {
						every_in_list = {
							variable = connected_titles
							limit = {
								NOR = {
									exists = var:checked_de_jure
									is_in_list = titles_to_choose_from
								}
							}
							add_to_list = titles_to_choose_from
						}
					}
					random_in_list = {
						list = titles_to_choose_from
						weight = {
							base = 10
							modifier = {
								factor = this.rnw_de_jure_choose_multiplier
							}
						}
						rnw_set_de_jure_liege_title_effect = yes
						set_variable = { name = checked_de_jure value = yes }
					}
					every_in_list = {
						list = titles_to_choose_from
						remove_from_list = titles_to_choose_from
					}
				}
				remove_variable = titles_still_wanted
				if = {
					limit = {
						scope:min > rnw_num_of_direct_de_jure_titles
					}
					add_to_list = titles_with_few_title
				}
			}
		}
	}
}
rnw_check_merge_titles_effect = {
	while = {
		limit = {
			any_in_list = {
				list = titles_with_few_title
				NOT = {	exists = var:checked_merge }
			}
		}
		ordered_in_list = {
			list = titles_with_few_title
			limit = {
				NOT = {	exists = var:checked_merge }
			}
			order_by = rnw_reversed_num_of_direct_de_jure_titles
			save_temporary_scope_as = new_title
			if = {
				limit = {
					any_$BELLOW_TIER$_in_de_jure_hierarchy = {
						rnw_can_merge_with_connected_title_trigger = yes
					}
				}
				random_$BELLOW_TIER$_in_de_jure_hierarchy = {
					limit = {
						rnw_can_merge_with_connected_title_trigger = yes
					}
					random_in_list = {
						variable = connected_titles
						limit = {
							rnw_can_merge_with_liege_title_trigger = yes
						}
						de_jure_liege = {
							save_temporary_scope_as = title_to_merge
						}
					}
				}
			}
			if = {
				limit = {
					exists = scope:title_to_merge
				}
				random_list = {
					10 = {
						modifier = {
							factor = rnw_num_of_direct_de_jure_titles
						}
						rnw_merge_titles_effect = {
							DOMINANT = scope:new_title
							SUBSERVIENT = scope:title_to_merge
						}
					}
					10 = {
						modifier = {
							factor = scope:title_to_merge.rnw_num_of_direct_de_jure_titles
						}
						rnw_merge_titles_effect = {
							DOMINANT = scope:title_to_merge
							SUBSERVIENT = scope:new_title
						}
					}
				}
				clear_saved_scope = title_to_merge
			}
			else = {
				set_variable = { name = checked_merge value = yes }
			}
		}
	}
}
rnw_cut_off_disconnected_titles_effect = {
	save_scope_value_as = {
		name = title_was_transferred
		value = yes
	}
	while = {
		limit = {
			exists = scope:title_was_transferred
		}
		clear_saved_scope = title_was_transferred
		every_in_list = {
			list = titles_to_handle
			limit = {
				rnw_disconnected_title_trigger = yes
			}
			add_to_list = disconnected_titles
		}
		ordered_in_list = {
			list = disconnected_titles
			order_by = de_jure_liege.rnw_num_of_direct_de_jure_titles
			max = 100
			check_range_bounds = no
			if = {
				limit = {
					scope:min < de_jure_liege.rnw_num_of_direct_de_jure_titles
					rnw_disconnected_title_trigger = yes
				}
				save_temporary_scope_as = disconnected_title
				every_in_list = {
					variable = connected_titles
					limit = {
						NOT = {
							de_jure_liege = scope:disconnected_title.de_jure_liege
						}
						scope:max >= de_jure_liege.rnw_num_of_direct_de_jure_titles
					}
					de_jure_liege = {
						add_to_list = potential_takers
						if = {
							limit = {
								has_variable = titles_connected
							}
							change_variable = {
								name = titles_connected
								add = 1
							}
						}
						else = {
							set_variable = {
								name = titles_connected
								value = 1
							}
						}
					}
				}
				if = {
					limit = {
						any_in_list = {
							list = potential_takers
							var:titles_connected >= 2
						}
					}
					ordered_in_list = {
						list = potential_takers
						limit = {
							var:titles_connected >= 2
						}
						max = 1
						order_by = rwn_take_disconnected_score
						save_temporary_scope_as = new_title
						scope:disconnected_title = {
							set_de_jure_liege_title = scope:new_title
							save_scope_value_as = {
								name = title_was_transferred
								value = yes
							}
						}
					}
				}
				every_in_list = {
					list = potential_takers
					remove_from_list = potential_takers
					remove_variable = titles_connected
				}
			}
		}
		every_in_list = {
			list = disconnected_titles
			remove_from_list = disconnected_titles
		}
	}
}
rnw_generate_random_naming_character_effect = {
	random_list = {
		10 = {
			create_character = {
				location = root.title_province
				template = pool_repopulate_prowess
				dynasty = generate
				gender_female_chance = 50
				save_scope_as = naming_character
			}
		}
		10 = {
			create_character = {
				location = root.title_province
				template = pool_repopulate_diplomacy
				dynasty = generate
				gender_female_chance = 50
				save_scope_as = naming_character
			}
		}
		10 = {
			create_character = {
				location = root.title_province
				template = pool_repopulate_martial
				dynasty = generate
				gender_female_chance = 50
				save_scope_as = naming_character
			}
		}
		10 = {
			create_character = {
				location = root.title_province
				template = pool_repopulate_stewardship
				dynasty = generate
				gender_female_chance = 50
				save_scope_as = naming_character
			}
		}
		10 = {
			create_character = {
				location = root.title_province
				template = pool_repopulate_intrigue
				dynasty = generate
				gender_female_chance = 50
				save_scope_as = naming_character
			}
		}
		10 = {
			create_character = {
				location = root.title_province
				template = pool_repopulate_learning
				dynasty = generate
				gender_female_chance = 50
				save_scope_as = naming_character
			}
		}
	}
}
rnw_assign_naming_flags_effect = {
	random_list = {
		100 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_ia
			}
		}
		70 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_land
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_an
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_en
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_istan
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_lia
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_ny
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_ry
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_ex
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_vania
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_ony
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_ium
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_co
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_rus
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_al
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_li
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_ending_ine
			}
		}
		30 = {
			set_variable = {
				name = title_endig
				value = flag:rnw_letter_a
			}
		}
	}
}